{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Brain Foundation Models","text":"<p>Brain Foundation Models</p> <p>This is a dummy page for the documentation site powered by MkDocs. The theme used is Material for MkDocs.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"getting-started/","title":"Welcome to the Brain Foundation Model team!","text":"<p>These pages will help you get started with the Brain Foundation Models (BFM) project. Follow the side navigation to the left to complete the onboarding process.</p> <p>Callout</p> <p>Callouts are used to highlight important information, and are required unless otherwise specified.</p>"},{"location":"getting-started/installation/","title":"Codebase Installation","text":"<p>If you're not yet invited to join as a collaborator to the \"BFM\" GitHub repository, please email me at zaho@mit.edu with your GitHub username. Check your email for an invitation!</p>"},{"location":"getting-started/installation/#onboarding","title":"Onboarding","text":"<p>Please see the video at this link for onboarding (requires an MIT zoom log in): ONBOARDING VIDEO (20min)</p>"},{"location":"getting-started/installation/#setup-instructions","title":"Setup Instructions","text":"<ol> <li>Clone the codebase to Openmind. Create a directory in <code>/om2/user/&lt;your_username&gt;/&lt;your_name&gt;</code> and work there. <pre><code>git clone https://github.com/azaho/bfm.git\ncd bfm\n</code></pre></li> <li>Create a virtual environment and install the required packages: <pre><code>python -m venv .venv\nsource .venv/bin/activate\npip install --upgrade pip\npip install -r requirements.txt\n</code></pre></li> <li>Copy over the contents of <code>.env.example</code> to <code>.env</code>.</li> <li>If you're not on Openmind, you'll need to download the BrainTreebank dataset (~130 GB). If you're on Openmind, you are all set! The dataset is already available in the <code>/om2/user/&lt;your_username&gt;/braintreebank</code> directory.<ul> <li>Download this script: braintreebank_download_extract.py from the Neuroprobe repository.</li> <li>Install necessary packages: <pre><code>pip install beautifulsoup4 requests\n</code></pre></li> <li>Run the script to download and extract the dataset: <pre><code>python braintreebank_download_extract.py\n</code></pre></li> <li>Update the <code>.env</code> variable <code>BRAIN_TREEBANK_ROOT_DIR</code> to point to the root directory of the BrainTreebank dataset on your machine. </li> </ul> </li> </ol>"},{"location":"getting-started/installation/#weights-and-biases","title":"Weights and Biases","text":"<p>We visualize our training runs using Weights and Biases (wandb). </p> <p>Registration</p> <p>Create an account with your educational email address at wandb.ai . Ensure you indicate that you are a student during registration to get free upgrade. </p> <p>Once registered, download the CLI tool: <pre><code>pip install wandb \n</code></pre></p> <p>Then, log in to the CLI using your credentials: <pre><code>wandb login\n</code></pre> The token can be found in your wandb account home.</p> <p>After registration, you can log in to the wandb CLI, pasting your API key when prompted: <pre><code>wandb login\n</code></pre></p> <p>Now, you specify the <code>wandb_project</code> in your training script. For example, to set the project name to \"bfm\": <pre><code>python pretrain.py --training.setup_name andrii0 --cluster.wandb_project bfm\n</code></pre> Now, in the Weights and Biases dashboard, you can see your training runs under the \"bfm\" project. Projects are similar to folders, and you can call them whatever you like.</p>"},{"location":"getting-started/installation/#running-a-pretraining-job","title":"Running a Pretraining Job","text":"<p>Once you have set up the codebase and installed the required packages, you can start pretraining a model. This requires an A100 GPU. If you're on Openmind, you can request a node with an A100 GPU by following the instructions in the Openmind documentation. <pre><code>python pretrain.py --training.setup_name andrii0 --cluster.cache_subjects 0 --cluster.eval_at_beginning 0\n</code></pre></p>"},{"location":"getting-started/onboarding-reflections/","title":"My Onboarding Reflections","text":"<p>This page covers my experience with the onboarding task for the Brain Foundation Models (BFM) project. It can also serves as a guide for future contributors to understand the process and expectations.</p>"},{"location":"getting-started/onboarding-reflections/#initial-impressions","title":"Initial Impressions","text":"<p>After exploring the codebase, I found it well-structured and easy to navigate. As I'm using ETH Zurich's Euler cluster, I had to adapt the setup instructions slightly to fit my environment. The provided instructions were clear, but I had to ensure that the paths and configurations matched my system. I also defined my own <code>.run.sh</code> script to handle the SLURM job submission.</p>"},{"location":"getting-started/onboarding-reflections/#implementation-steps","title":"Implementation Steps","text":"<p>I began by copying the <code>andrii0.py</code> file to <code>bradya0.py</code> and modifying it to suit my needs. I first removed the model components such as the <code>OriginalModel</code> and <code>TimeTransformer</code>, as I was going to build a much simpler linear model. For this, I defined a new <code>LinearModel</code> class that inherits from <code>BFMModule</code>. </p> <p>Linear Model Implementation:</p> <p>The <code>__init__</code> method initializes the model with a linear layer, and the <code>forward</code> method processes the input data. Following the instructions, the model's forward method performs the following steps:</p> <ul> <li>The model averages the electrode data across the first (<code>n_electrodes</code>) dimension.</li> <li>These averaged features are then binned into a specified number of bins (I used <code>n_bins = 10</code>).</li> <li>Each bin is used as input to the linear layer, which outputs a prediction for the next bin.</li> <li>Finally, the model returns two tensors, where at point <code>i</code>, the first tensor contains the prediction for bin <code>i</code> and the second tensor contains the data for bin <code>i+1</code>.</li> </ul> <p>Training Setup:</p> <p>I kept my training setup quite simple. The <code>model_components['model']</code> was set to an instance of <code>LinearModel</code>, and I kept the <code>model_components['electrode_embeddings']</code> to <code>None</code>, as I didn't use any embeddings in my linear model. </p> <p>I also removed the additional <code>preprocess</code> steps that were not necessary for this model.</p> <p>Pretraining Loss</p> <p>As per the instructions, I utilized the <code>L2Loss</code> for the pretraining task. This loss function was implemented with the <code>torch.nn.MSELoss</code> class, which computes the mean squared error between the predicted and actual values for the next bin.</p> <p>Evaluation</p> <p>I used a very simple evaluation setup for the <code>generate_frozen_features</code> method. I simply took the model's predictions and averaged them across the first dimension (the bins).</p> <p>Results</p> <p>The model began with an initial L2 loss of around 1200 to a final batch loss of 6.7 after 100 epochs. By 20 epochs, the loss had already dropped to around 20, and it took 70 epochs to reach a loss of under 7. </p>"},{"location":"getting-started/onboarding-task/","title":"Onboarding Task","text":"<p>To familiarize yourself with the Brain Foundation Models (BFM) project, please try to implement and train a simple linear model. </p> <p>This will involve making a copy of the <code>andrii0.py</code> file in the <code>training_setup</code> directory and modifying that copy. The goal is to get the model to train and evaluate, even if the performance is not optimal. No other files will need to be modified.</p> <p>Model Overview: The linear model will take the data, average it over all of the electrodes, split into bins of your predetermined size, and then use the linear regression to predict the future bin from the previous bins. The model should be trained with the <code>L2</code> loss function.</p> <p>Evaluation: Feel free to come up with your own scheme of how the model's features (<code>generate_frozen_features</code>) will be.</p>"},{"location":"getting-started/preliminary-background/","title":"Preliminary Background","text":"<p>The Brain Foundation Models (BFM) project is an initiative to develop and analyze large-scale models of brain function. The project aims to bridge the gap between neuroscience and machine learning by creating foundation models that can simulate and understand complex brain processes.</p>"},{"location":"getting-started/preliminary-background/#introduction-to-human-neuroscience","title":"Introduction to Human Neuroscience","text":"<p>Slides</p> <p>For a comprehensive introduction to human neuroscience, please review these slides (~2GB) from a talk I gave in the winter.</p> <p>I will try to find a recording, or give it again! People told me after they loved this introductio. The most useful part for our purposes is the section on StereoEEG, and brain simulation experiments.</p> <p>In parrticular, check out:</p> <ul> <li>Slide 4 (Optional): A doctor showing different parts of the brain (go to \u201cCredit\u201d for sound)</li> <li>Slide 14: Intracranial Electrophysiology neurotech (we will be working with it!)</li> <li>Slides 15-16: Stimulating the Fusiform Face Area for a Japanese patient; he describes how objects turn into faces in his mind when electrodes are stimulated</li> <li>Slide 17: Harry Forestell, a news reporter from Canada, describes how his Deep Brain Stimulation (DBS) treatment alleviates his tremor by stimulating electrodes</li> <li>Slide 24 (non-invasive, optional): Transcranial Magnetic Stimulation. A demo of how stimulating the brain with a high magnetic field can produce effects</li> <li>Slides 32-33: How stimulating the amygdala produces extreme feelings of fear</li> <li>Slides 35-36: Stimulating the hypothalamus modifying the emotional state</li> <li>Slides 37-38: Stimulating the Nucleus Accumbens (this guy would be in jail if he did this today probably \u2013 the ethics evolved significantly to where this would be unacceptable)</li> <li>Slides 45-46: Decoding images from visual regions in the brain (this is from 2011 though, the tech is SO much better now)</li> </ul>"},{"location":"getting-started/preliminary-background/#representation-of-brain-states","title":"Representation of Brain States","text":"<p>Given a ton of unlabeled neural data, we can create (learn) a transformation function from raw SEEG measurements into a latent feature vector x(t). Then, x(t) will be called a representation of the brain state over time. The goal is for x(t) to live in a latent space where features of interest are readily (linearly) available for decoding. For example, the physiological state of the person, stimuli that they are experiencing or processing, cognitive processes, aspects of their subjective experience, inner vocalization, etc.</p> <p>Slides</p> <p>Make sure to review the slides (Project Overview) from my Brain Foundation Models talk; this may be the most important thing from the background. I may do the talk again sometime in the future!</p>"},{"location":"getting-started/preliminary-background/#prior-work","title":"Prior Work","text":"<p>Papers</p> <p>Briefly skim the below two papers on my personal website. </p> <ul> <li>Learning Representations of Human Neural Activity via Contrastive Neural Forecasting</li> <li>Neuroprobe: Evaluating Intracranial Brain Responses to Naturalistic Stimuli</li> </ul> <p>Also check out this paper by my collaborators Chris and Geeling (optional). Don't spend too much time on the optional paper.</p> <p></p>"},{"location":"reference/","title":"Brain Foundation Models Code Reference","text":"<p>This section provides detailed documentation of the codebase. Use the navigation on the left to explore different components of the project.</p> <p>This documentation site is a work in progress</p>"}]}